pipeline {
    agent { label 'mac_m1_03'}
    environment {
        REPORT_URL = 'http://10.151.26.82:8080/job/QC-TPL/job/qam-all-speedy/'
        WEBHOOK_URL = 'https://cpallgroup.webhook.office.com/webhookb2/33907bd5-ae56-49a2-a24b-bfc71f0906ca@0e837ccb-289e-45c4-8f1e-e283bb7f6289/IncomingWebhook/8eca3543a70e490dadb7fe3af6805be9/029f0d35-c7da-4e56-8f98-2ae1a6bd42a4/V2R9PPVkp3lk0x-kIjL6oWbJx3OZNazPale-akNr8lmv41'
        ICON_STATUS_X = "&#10060;"
        ICON_STATUS_CHECK = "&#9989;"
        ICON_STATUS_INFO = "&#8505;"
        ICON_SKIP = "&#x23E9;"
        ICON_STATUS_CLOCK = "&#x23F3;"
    }
    stages {
        stage('Update ChromeDriver') {
            steps {
                script {
                    echo "Updating ChromeDriver to match installed Chrome version"
                    sh """
                        CHROME_VERSION=\$(/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --version | awk '{print \$3}')
                        echo "Installed Chrome version: \$CHROME_VERSION"
                        curl -L -o chromedriver.zip https://storage.googleapis.com/chrome-for-testing-public/\$CHROME_VERSION/mac-x64/chromedriver-mac-x64.zip
                        unzip -o chromedriver.zip -d /usr/local/bin/
                        rm chromedriver.zip
                        # Ensure correct permissions
                        mv /usr/local/bin/chromedriver-mac-x64/chromedriver /usr/local/bin/chromedriver
                        chmod +x /usr/local/bin/chromedriver

                        echo "ChromeDriver installed version:"
                        /usr/local/bin/chromedriver --version
                    """
                }
            }
        }
        stage('Install Python Dependencies') {
            steps {
                script {
                    echo "Installing library"
                    sh "pip install -r requirement.txt"
                    def startTime = new Date()
                    env.START_TIME = startTime
                }
            }
        }
        stage('Run Robot') {
            steps {
                sh """
                    mkdir -p report results
                    cd report
                    robot  -v ENV:${ENV}  -i ${MODULE}  ${SCENARIO_NO}  ../testcases/
                """
                }
            }
    }   
    post {
        always {
            echo "Publish Robot Framework test results"
            robot(
                outputPath: 'report',
                outputFileName: 'output.xml',
                reportFileName: 'report.html',
                logFileName: 'log.html',
                disableArchiveOutput: false,
                passThreshold: 100.0,
                unstableThreshold: 100.0,
                otherFiles: '*.png,*.jpg',
                onlyCritical: false
            )
            script {
                def endTime = new Date()
                if (params.ROBOT_RESULT == 'TRUE') {
                archiveArtifacts artifacts: 'results/**', allowEmptyArchive: true
                }
                def outputXml = readFile('report/output.xml')
                // def findGenerated = (outputXml =~ /generated="([^"]+)"/)
                // String startValue = findGenerated.find() ? findGenerated.group(1) : "Not Found"
                // def findskip = (outputXml =~ /(?i)<stat[^>]*skip="(\d+)"[^>]*>All Tests<\/stat>/)
                // def findpass = (outputXml =~ /(?i)<stat[^>]*pass="(\d+)"[^>]*>All Tests<\/stat>/)
                // def findfail = (outputXml =~ /(?i)<stat[^>]*fail="(\d+)"[^>]*>All Tests<\/stat>/)
                // int skipValue = findskip.find() ? findskip.group(1) as Integer : 0
                // int passValue = findpass.find() ? findpass.group(1) as Integer : 0
                // int failValue = findfail.find() ? findfail.group(1) as Integer : 0
                // int totalTests = passValue + failValue + skipValue
                // echo "TOTAL TESTS: ${totalTests} (PASS: ${passValue}, FAIL: ${failValue}, SKIP: ${skipValue})"

                
                // Extract all required information from the XML immediately
                String startValue = (outputXml =~ /generated="([^"]+)"/).with { it.find() ? it.group(1) : "Not Found" }
                int skipValue = (outputXml =~ /(?i)<stat[^>]*skip="(\d+)"[^>]*>All Tests<\/stat>/).with { it.find() ? it.group(1).toInteger() : 0 }
                int passValue = (outputXml =~ /(?i)<stat[^>]*pass="(\d+)"[^>]*>All Tests<\/stat>/).with { it.find() ? it.group(1).toInteger() : 0 }
                int failValue = (outputXml =~ /(?i)<stat[^>]*fail="(\d+)"[^>]*>All Tests<\/stat>/).with { it.find() ? it.group(1).toInteger() : 0 }
                int totalTests = passValue + failValue + skipValue
                echo "TOTAL TESTS: ${totalTests} (PASS: ${passValue}, FAIL: ${failValue}, SKIP: ${skipValue})"



                // def generatedMatch = (outputXml =~ /generated="([^"]+)"/)
                // String startValue = generatedMatch.find() ? generatedMatch.group(1) : "Not Found"
                // def skipMatch = (outputXml =~ /(?i)<stat[^>]*skip="(\\d+)"[^>]*>All Tests<\\/stat>/)
                // int skipValue = skipMatch.find() ? skipMatch.group(1).toInteger() : 0
                // def passMatch = (outputXml =~ /(?i)<stat[^>]*pass="(\\d+)"[^>]*>All Tests<\\/stat>/)
                // int passValue = passMatch.find() ? passMatch.group(1).toInteger() : 0
                // def failMatch = (outputXml =~ /(?i)<stat[^>]*fail="(\\d+)"[^>]*>All Tests<\\/stat>/)
                // int failValue = failMatch.find() ? failMatch.group(1).toInteger() : 0
                // int totalTests = passValue + failValue + skipValue
                // echo "TOTAL TESTS: ${totalTests} (PASS: ${passValue}, FAIL: ${failValue}, SKIP: ${skipValue})"

                // Define the JSON payload
                echo "Send the webhook message using curl"
                def payload = """
                {
                "type": "message",
                "attachments": [{
                    "contentType": "application/vnd.microsoft.card.adaptive",
                    "content": {
                        "schema": "http://adaptivecards.io/schemas/adaptive-card.json",
                        "type": "AdaptiveCard",
                        "version": "1.4",
                        "body": [
                        {
                            "type": "TextBlock",
                            "text": "${ICON_STATUS_INFO}${env.JOB_NAME}: Build ${env.BUILD_ID}${ICON_STATUS_INFO}",
                            "weight": "Bolder",
                            "size": "Medium"
                        },
                        {
                            "type": "TextBlock",
                            "text": "Branch: [${BRANCH}](http://10.151.26.82:8080/job/QC-TPL/job/qam-all-speedy/)",
                            "wrap": true
                        },
                        {
                            "type": "TextBlock",
                            "text": "Environment: ${ENV}",
                            "wrap": true
                        },
                        {
                            "type": "TextBlock",
                            "text": "Tag: ${MODULE}",
                            "wrap": true
                        },
                        {
                            "type": "TextBlock",
                            "text": "Start Time: ${env.START_TIME}",
                            "wrap": true
                        },
                        {
                            "type": "TextBlock",
                            "text": "End Time: ${endTime}",
                            "wrap": true
                        },
                        {
                            "type": "TextBlock",
                            "text": "Total Scenarios: ${totalTests} (${ICON_STATUS_CHECK}Passed: ${passValue} |${ICON_STATUS_X}Failed: ${failValue} |${ICON_SKIP}Skipped: ${skipValue} )",
                            "wrap": true
                        },
                        {
                            "type": "TextBlock",
                            "text": "Report: [Click here to view the report](${REPORT_URL}${env.BUILD_ID}/robot/report/report.html)",
                            "wrap": true
                        }                              
                        ]
                    }
                    }]
                }
                """
                // Send the webhook message using curl
                sh """
                curl -X POST \
                    -H 'Content-Type: application/json' \
                    -d '${payload}' \
                    ${WEBHOOK_URL}
                """
            }
        }
    }

}
